const { MessageMedia } = require('whatsapp-web.js');\nconst MessageLog = require('../../models/MessageLog');\nconst WhatsAppService = require('../whatsapp/WhatsAppService');\nconst ContactService = require('../contact/ContactService');\nconst GroupService = require('../contact/GroupService');\nconst ImageService = require('./ImageService');\nconst Logger = require('../../utils/Logger');\n\n/**\n * Service for handling WhatsApp messages\n * Implements Single Responsibility Principle\n */\nclass MessageService {\n    constructor() {\n        this.whatsAppService = new WhatsAppService();\n        this.contactService = new ContactService();\n        this.groupService = new GroupService();\n        this.imageService = new ImageService();\n        this.logger = new Logger('MessageService');\n    }\n\n    /**\n     * Send message to single contact\n     */\n    async sendMessage(userId, placeId, contactId, message, imageUrl = null) {\n        try {\n            this.logger.start(`Sending message to contact ${contactId}`);\n            \n            // Get client and session data\n            const { client, sessionData } = await this.whatsAppService.getClientByCredentials(userId, placeId);\n            \n            // Get contact details\n            const contact = await this.contactService.getContactById(userId, placeId, contactId);\n            \n            // Handle image if provided\n            let imageData = null;\n            if (imageUrl) {\n                imageData = await this.imageService.downloadImageFromUrl(imageUrl);\n                this.logger.info(`Downloaded image for message: ${imageData.sizeKB}KB`);\n            }\n            \n            // Create message log entry\n            const messageLog = await this.createMessageLog({\n                userId,\n                placeId,\n                sessionId: sessionData.session_id,\n                recipientNumber: contact.number,\n                recipientName: contact.name,\n                messageContent: message,\n                messageType: imageUrl ? 'image' : 'text',\n                status: 'pending'\n            });\n            \n            try {\n                // Send message via WhatsApp\n                let result;\n                const whatsappNumber = `${contact.number}@c.us`;\n                \n                if (imageData) {\n                    const media = new MessageMedia(imageData.mimeType, imageData.buffer.toString('base64'));\n                    result = await client.sendMessage(whatsappNumber, media, { caption: message });\n                } else {\n                    result = await client.sendMessage(whatsappNumber, message);\n                }\n                \n                // Update message log with success\n                await this.updateMessageLogSuccess(messageLog, result.id._serialized);\n                \n                // Update session activity\n                await this.whatsAppService.updateSessionActivity(sessionData.session_id);\n                \n                this.logger.success(`Message sent successfully to ${contact.number}`);\n                \n                return {\n                    success: true,\n                    contact_id: contactId,\n                    message_id: result.id._serialized,\n                    recipient: {\n                        name: contact.name,\n                        number: contact.number\n                    },\n                    message_type: imageUrl ? 'image' : 'text',\n                    sent_at: new Date()\n                };\n                \n            } catch (sendError) {\n                // Update message log with failure\n                await this.updateMessageLogFailure(messageLog, sendError.message);\n                throw sendError;\n            }\n            \n        } catch (error) {\n            this.logger.error(`Error sending message to contact ${contactId}:`, error);\n            throw new Error(`Failed to send message: ${error.message}`);\n        }\n    }\n\n    /**\n     * Send message to group\n     */\n    async sendMessageToGroup(userId, placeId, groupId, message, imageUrl = null) {\n        try {\n            this.logger.start(`Sending message to group ${groupId}`);\n            \n            // Get client and session data\n            const { client, sessionData } = await this.whatsAppService.getClientByCredentials(userId, placeId);\n            \n            // Get group contacts\n            const groupData = await this.groupService.getContactsByGroupId(userId, placeId, groupId);\n            const contacts = groupData.contacts;\n            \n            if (contacts.length === 0) {\n                throw new Error('No contacts found in group');\n            }\n            \n            // Handle image if provided\n            let imageData = null;\n            if (imageUrl) {\n                imageData = await this.imageService.downloadImageFromUrl(imageUrl);\n                this.logger.info(`Downloaded image for group message: ${imageData.sizeKB}KB`);\n            }\n            \n            const results = [];\n            let sentCount = 0;\n            let failedCount = 0;\n            \n            // Send to each contact in the group\n            for (const contact of contacts) {\n                try {\n                    // Create message log for each recipient\n                    const messageLog = await this.createMessageLog({\n                        userId,\n                        placeId,\n                        sessionId: sessionData.session_id,\n                        recipientNumber: contact.number,\n                        recipientName: contact.name,\n                        messageContent: message,\n                        messageType: imageUrl ? 'image' : 'text',\n                        groupId: groupId,\n                        status: 'pending'\n                    });\n                    \n                    // Send message\n                    let result;\n                    const whatsappNumber = `${contact.number}@c.us`;\n                    \n                    if (imageData) {\n                        const media = new MessageMedia(imageData.mimeType, imageData.buffer.toString('base64'));\n                        result = await client.sendMessage(whatsappNumber, media, { caption: message });\n                    } else {\n                        result = await client.sendMessage(whatsappNumber, message);\n                    }\n                    \n                    // Update message log with success\n                    await this.updateMessageLogSuccess(messageLog, result.id._serialized);\n                    \n                    results.push({\n                        contact_id: contact.contact_id,\n                        number: contact.number,\n                        name: contact.name,\n                        status: 'sent',\n                        message_id: result.id._serialized\n                    });\n                    \n                    sentCount++;\n                    \n                } catch (sendError) {\n                    this.logger.error(`Error sending to ${contact.number}:`, sendError);\n                    \n                    // Update message log with failure\n                    if (messageLog) {\n                        await this.updateMessageLogFailure(messageLog, sendError.message);\n                    }\n                    \n                    results.push({\n                        contact_id: contact.contact_id,\n                        number: contact.number,\n                        name: contact.name,\n                        status: 'failed',\n                        error: sendError.message\n                    });\n                    \n                    failedCount++;\n                }\n            }\n            \n            // Update session activity\n            await this.whatsAppService.updateSessionActivity(sessionData.session_id);\n            \n            this.logger.success(`Group message completed: ${sentCount} sent, ${failedCount} failed`);\n            \n            return {\n                success: true,\n                group_id: groupId,\n                group_name: groupData.group_info.name,\n                total_contacts: contacts.length,\n                results: results,\n                summary: {\n                    sent: sentCount,\n                    failed: failedCount,\n                    success_rate: Math.round((sentCount / contacts.length) * 100)\n                },\n                message_type: imageUrl ? 'image' : 'text',\n                sent_at: new Date()\n            };\n            \n        } catch (error) {\n            this.logger.error(`Error sending message to group ${groupId}:`, error);\n            throw new Error(`Failed to send group message: ${error.message}`);\n        }\n    }\n\n    /**\n     * Get message logs with pagination\n     */\n    async getMessageLogs(userId, placeId, page = 1, limit = 50) {\n        try {\n            const skip = (page - 1) * limit;\n            \n            const logs = await MessageLog.find({ \n                user_id: userId, \n                place_id: placeId \n            })\n            .sort({ created_at: -1 })\n            .skip(skip)\n            .limit(limit)\n            .lean();\n\n            const totalCount = await MessageLog.countDocuments({ \n                user_id: userId, \n                place_id: placeId \n            });\n\n            // Get statistics\n            const stats = await this.getMessageStatistics(userId, placeId);\n\n            return {\n                logs,\n                pagination: {\n                    current_page: page,\n                    per_page: limit,\n                    total: totalCount,\n                    total_pages: Math.ceil(totalCount / limit),\n                    has_next: page < Math.ceil(totalCount / limit),\n                    has_prev: page > 1\n                },\n                statistics: stats\n            };\n        } catch (error) {\n            this.logger.error('Error getting message logs:', error);\n            throw new Error(`Failed to get message logs: ${error.message}`);\n        }\n    }\n\n    /**\n     * Get message statistics\n     */\n    async getMessageStatistics(userId, placeId) {\n        try {\n            const stats = await MessageLog.aggregate([\n                { $match: { user_id: userId, place_id: placeId } },\n                {\n                    $group: {\n                        _id: null,\n                        total_messages: { $sum: 1 },\n                        sent_messages: {\n                            $sum: { $cond: [{ $eq: ['$status', 'sent'] }, 1, 0] }\n                        },\n                        failed_messages: {\n                            $sum: { $cond: [{ $eq: ['$status', 'failed'] }, 1, 0] }\n                        },\n                        text_messages: {\n                            $sum: { $cond: [{ $eq: ['$message_type', 'text'] }, 1, 0] }\n                        },\n                        image_messages: {\n                            $sum: { $cond: [{ $eq: ['$message_type', 'image'] }, 1, 0] }\n                        }\n                    }\n                }\n            ]);\n\n            const result = stats[0] || {\n                total_messages: 0,\n                sent_messages: 0,\n                failed_messages: 0,\n                text_messages: 0,\n                image_messages: 0\n            };\n\n            return {\n                ...result,\n                success_rate: result.total_messages > 0 ? \n                    Math.round((result.sent_messages / result.total_messages) * 100) : 0,\n                failure_rate: result.total_messages > 0 ? \n                    Math.round((result.failed_messages / result.total_messages) * 100) : 0\n            };\n        } catch (error) {\n            this.logger.error('Error getting message statistics:', error);\n            return {\n                total_messages: 0,\n                sent_messages: 0,\n                failed_messages: 0,\n                text_messages: 0,\n                image_messages: 0,\n                success_rate: 0,\n                failure_rate: 0\n            };\n        }\n    }\n\n    /**\n     * Test image URL\n     */\n    async testImageUrl(imageUrl) {\n        return await this.imageService.testImageUrl(imageUrl);\n    }\n\n    /**\n     * Create message log entry\n     */\n    async createMessageLog(logData) {\n        try {\n            const messageLog = new MessageLog({\n                user_id: logData.userId,\n                place_id: logData.placeId,\n                session_id: logData.sessionId,\n                recipient_number: logData.recipientNumber,\n                recipient_name: logData.recipientName,\n                message_content: logData.messageContent,\n                message_type: logData.messageType,\n                group_id: logData.groupId || null,\n                status: logData.status\n            });\n            \n            await messageLog.save();\n            return messageLog;\n        } catch (error) {\n            this.logger.error('Error creating message log:', error);\n            throw error;\n        }\n    }\n\n    /**\n     * Update message log with success\n     */\n    async updateMessageLogSuccess(messageLog, messageId) {\n        try {\n            messageLog.status = 'sent';\n            messageLog.message_id = messageId;\n            messageLog.sent_at = new Date();\n            await messageLog.save();\n        } catch (error) {\n            this.logger.warn('Error updating message log success:', error);\n        }\n    }\n\n    /**\n     * Update message log with failure\n     */\n    async updateMessageLogFailure(messageLog, errorMessage) {\n        try {\n            messageLog.status = 'failed';\n            messageLog.error_message = errorMessage;\n            messageLog.failed_at = new Date();\n            await messageLog.save();\n        } catch (error) {\n            this.logger.warn('Error updating message log failure:', error);\n        }\n    }\n}\n\nmodule.exports = MessageService;\n