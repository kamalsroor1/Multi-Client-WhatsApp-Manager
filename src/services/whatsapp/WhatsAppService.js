const WhatsAppSession = require('../../models/WhatsAppSession');\nconst WhatsAppClientFactory = require('./WhatsAppClientFactory');\nconst ContactFetchingService = require('./ContactFetchingService');\nconst Logger = require('../../utils/Logger');\n\n/**\n * Main WhatsApp service for session management\n * Implements Facade pattern to provide simple interface\n */\nclass WhatsAppService {\n    constructor() {\n        this.clientFactory = new WhatsAppClientFactory();\n        this.contactFetchingService = new ContactFetchingService();\n        this.logger = new Logger('WhatsAppService');\n    }\n\n    /**\n     * Initialize WhatsApp client for user\n     */\n    async initializeClient(userId, placeId) {\n        try {\n            this.logger.start(`Initializing WhatsApp client for user ${userId}, place ${placeId}`);\n            \n            // Check if session already exists and is active\n            const existingSession = await this.findActiveSession(userId, placeId);\n            if (existingSession && this.clientFactory.hasClient(existingSession.session_id)) {\n                this.logger.info(`Active session found: ${existingSession.session_id}`);\n                return {\n                    success: true,\n                    session_id: existingSession.session_id,\n                    status: existingSession.status,\n                    message: 'Session already active'\n                };\n            }\n\n            // Generate new session\n            const sessionId = this.clientFactory.generateSessionId(userId, placeId);\n            \n            // Create session record\n            const sessionData = await this.createSessionRecord(userId, placeId, sessionId);\n            \n            // Create WhatsApp client\n            const client = await this.clientFactory.createClient(sessionId);\n            \n            // Setup event handlers\n            const eventHandlers = this.createEventHandlers(sessionData);\n            this.clientFactory.setupClientEventHandlers(client, sessionId, eventHandlers);\n            \n            // Store client\n            this.clientFactory.storeClient(sessionId, client, sessionData);\n            \n            // Initialize client\n            client.initialize();\n            \n            this.logger.success(`WhatsApp client initialized: ${sessionId}`);\n            \n            return {\n                success: true,\n                session_id: sessionId,\n                status: 'initializing',\n                message: 'Client initialization started'\n            };\n            \n        } catch (error) {\n            this.logger.error('Error initializing WhatsApp client:', error);\n            throw new Error(`Failed to initialize WhatsApp client: ${error.message}`);\n        }\n    }\n\n    /**\n     * Get session status\n     */\n    async getSessionStatus(userId, placeId) {\n        try {\n            const sessionData = await WhatsAppSession.findOne({ \n                user_id: userId, \n                place_id: placeId \n            }).sort({ created_at: -1 });\n\n            if (!sessionData) {\n                return { \n                    status: 'not_initialized', \n                    session_exists: false,\n                    message: 'No session found'\n                };\n            }\n\n            return {\n                session_id: sessionData.session_id,\n                status: sessionData.status,\n                qr_code: sessionData.qr_code,\n                phone_number: sessionData.phone_number,\n                name: sessionData.name,\n                connected_at: sessionData.connected_at,\n                session_exists: true,\n                total_contacts: sessionData.total_contacts || 0,\n                total_groups: sessionData.total_groups || 0,\n                last_contacts_sync: sessionData.last_contacts_sync,\n                contacts_fetch_progress: sessionData.contacts_fetch_progress || 0,\n                contacts_fetch_completed: sessionData.contacts_fetch_completed || false,\n                contacts_fetch_error: sessionData.contacts_fetch_error || null,\n                last_activity: sessionData.last_activity,\n                created_at: sessionData.created_at,\n                updated_at: sessionData.updated_at\n            };\n        } catch (error) {\n            this.logger.error('Error getting session status:', error);\n            throw new Error(`Failed to get session status: ${error.message}`);\n        }\n    }\n\n    /**\n     * Logout and cleanup session\n     */\n    async logout(userId, placeId) {\n        try {\n            this.logger.start(`Logging out session for user ${userId}, place ${placeId}`);\n            \n            const sessionData = await WhatsAppSession.findOne({ \n                user_id: userId, \n                place_id: placeId \n            }).sort({ created_at: -1 });\n\n            if (!sessionData) {\n                throw new Error('No session found to logout');\n            }\n\n            const client = this.clientFactory.getClient(sessionData.session_id);\n            if (client) {\n                try {\n                    await client.logout();\n                    await client.destroy();\n                } catch (clientError) {\n                    this.logger.warn('Error during client logout:', clientError);\n                }\n            }\n\n            // Update session status\n            sessionData.status = 'disconnected';\n            sessionData.updated_at = new Date();\n            await sessionData.save();\n\n            // Cleanup client\n            await this.clientFactory.cleanupClient(sessionData.session_id);\n\n            this.logger.success(`Session logged out: ${sessionData.session_id}`);\n            \n            return { \n                success: true, \n                message: 'Session logged out successfully',\n                session_id: sessionData.session_id\n            };\n\n        } catch (error) {\n            this.logger.error('Error during logout:', error);\n            throw new Error(`Logout failed: ${error.message}`);\n        }\n    }\n\n    /**\n     * Get client by session credentials\n     */\n    async getClientByCredentials(userId, placeId) {\n        const sessionData = await WhatsAppSession.findOne({ \n            user_id: userId, \n            place_id: placeId,\n            status: { $in: ['ready', 'connected', 'fetching_contacts'] }\n        });\n\n        if (!sessionData) {\n            throw new Error('No active session found');\n        }\n\n        const client = this.clientFactory.getClient(sessionData.session_id);\n        if (!client) {\n            throw new Error('Client not available');\n        }\n\n        return { client, sessionData };\n    }\n\n    /**\n     * Update session activity timestamp\n     */\n    async updateSessionActivity(sessionId) {\n        try {\n            await WhatsAppSession.findOneAndUpdate(\n                { session_id: sessionId },\n                { last_activity: new Date() }\n            );\n        } catch (error) {\n            this.logger.warn(`Failed to update session activity for ${sessionId}:`, error);\n        }\n    }\n\n    /**\n     * Find active session for user\n     */\n    async findActiveSession(userId, placeId) {\n        return await WhatsAppSession.findOne({ \n            user_id: userId, \n            place_id: placeId,\n            status: { $in: ['authenticated', 'connected', 'ready', 'fetching_contacts'] }\n        });\n    }\n\n    /**\n     * Create session record in database\n     */\n    async createSessionRecord(userId, placeId, sessionId) {\n        try {\n            const sessionData = new WhatsAppSession({\n                user_id: userId,\n                place_id: placeId,\n                session_id: sessionId,\n                status: 'initializing',\n                contacts_fetch_progress: 0,\n                contacts_fetch_completed: false\n            });\n            \n            await sessionData.save();\n            this.logger.info(`Session record created: ${sessionId}`);\n            \n            return sessionData;\n        } catch (error) {\n            this.logger.error(`Error creating session record for ${sessionId}:`, error);\n            throw error;\n        }\n    }\n\n    /**\n     * Create event handlers for WhatsApp client\n     */\n    createEventHandlers(sessionData) {\n        return {\n            onQR: async (qrDataURL) => {\n                sessionData.qr_code = qrDataURL;\n                sessionData.status = 'qr_ready';\n                sessionData.updated_at = new Date();\n                await sessionData.save();\n                this.logger.info(`QR code ready for session: ${sessionData.session_id}`);\n            },\n\n            onAuthenticated: async () => {\n                sessionData.status = 'authenticated';\n                sessionData.qr_code = null;\n                sessionData.updated_at = new Date();\n                await sessionData.save();\n                this.logger.success(`Session authenticated: ${sessionData.session_id}`);\n            },\n\n            onLoadingScreen: async () => {\n                sessionData.status = 'loading_screen';\n                sessionData.qr_code = null;\n                sessionData.updated_at = new Date();\n                await sessionData.save();\n                this.logger.info(`Loading screen for session: ${sessionData.session_id}`);\n            },\n\n            onReady: async (clientInfo) => {\n                // Update session with client info\n                sessionData.phone_number = clientInfo.wid.user;\n                sessionData.name = clientInfo.pushname;\n                sessionData.status = 'ready';\n                sessionData.connected_at = new Date();\n                sessionData.qr_code = null;\n                sessionData.updated_at = new Date();\n                await sessionData.save();\n                \n                this.logger.success(`Session ready: ${sessionData.session_id}`);\n                \n                // Start background contact fetching\n                this.startBackgroundContactFetch(sessionData);\n            },\n\n            onAuthFailure: async (message) => {\n                sessionData.status = 'error';\n                sessionData.updated_at = new Date();\n                await sessionData.save();\n                this.logger.error(`Auth failure for session ${sessionData.session_id}:`, { message });\n            },\n\n            onDisconnected: async (reason) => {\n                sessionData.status = 'disconnected';\n                sessionData.updated_at = new Date();\n                await sessionData.save();\n                this.logger.warn(`Session disconnected ${sessionData.session_id}:`, { reason });\n            }\n        };\n    }\n\n    /**\n     * Start background contact fetching\n     */\n    async startBackgroundContactFetch(sessionData) {\n        try {\n            const client = this.clientFactory.getClient(sessionData.session_id);\n            if (!client) {\n                throw new Error('Client not available for contact fetch');\n            }\n\n            this.logger.start(`Background contact fetch for session: ${sessionData.session_id}`);\n\n            // Create progress update callback\n            const onProgressUpdate = async (progress) => {\n                await WhatsAppSession.findOneAndUpdate(\n                    { session_id: sessionData.session_id },\n                    {\n                        status: progress.status,\n                        contacts_fetch_progress: progress.progress || 0,\n                        contacts_fetch_completed: progress.completed || false,\n                        contacts_fetch_error: progress.error || null,\n                        total_contacts: progress.total_contacts || sessionData.total_contacts,\n                        ...(progress.completed && { last_contacts_sync: new Date() }),\n                        updated_at: new Date()\n                    }\n                );\n            };\n\n            // Start fetching in background (non-blocking)\n            this.contactFetchingService.fetchContactsInBackground(\n                client,\n                sessionData.user_id,\n                sessionData.place_id,\n                sessionData.session_id,\n                onProgressUpdate\n            ).catch(error => {\n                this.logger.error(`Background contact fetch failed for ${sessionData.session_id}:`, error);\n            });\n\n        } catch (error) {\n            this.logger.error(`Error starting background contact fetch:`, error);\n        }\n    }\n\n    /**\n     * Get factory statistics\n     */\n    getStats() {\n        return this.clientFactory.getStats();\n    }\n\n    /**\n     * Graceful shutdown\n     */\n    async shutdown() {\n        this.logger.info('Shutting down WhatsApp service...');\n        await this.clientFactory.shutdownAllClients();\n        this.logger.success('WhatsApp service shut down successfully');\n    }\n}\n\nmodule.exports = WhatsAppService;\n