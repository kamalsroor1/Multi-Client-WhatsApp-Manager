const ContactService = require('../services/contact/ContactService');\nconst GroupService = require('../services/contact/GroupService');\nconst ApiResponse = require('../utils/ApiResponse');\nconst Logger = require('../utils/Logger');\n\n/**\n * Controller for contact operations\n * Implements Controller pattern for contact-related HTTP requests\n */\nclass ContactController {\n    constructor() {\n        this.contactService = new ContactService();\n        this.groupService = new GroupService();\n        this.logger = new Logger('ContactController');\n    }\n\n    /**\n     * Get all groups for a user\n     */\n    async getUserGroups(req, res) {\n        try {\n            const { user_id, place_id } = req.query;\n\n            this.logger.info(`Getting groups for user ${user_id}, place ${place_id}`);\n\n            const groups = await this.groupService.getUserGroups(\n                parseInt(user_id), \n                parseInt(place_id)\n            );\n\n            return ApiResponse.success(res, groups, `Found ${groups.length} groups`);\n        } catch (error) {\n            this.logger.error('Error getting user groups:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Get contacts by group ID\n     */\n    async getContactsByGroup(req, res) {\n        try {\n            const { user_id, place_id } = req.query;\n            const { group_id } = req.params;\n\n            this.logger.info(`Getting contacts for group ${group_id}`);\n\n            const groupData = await this.groupService.getContactsByGroupId(\n                parseInt(user_id), \n                parseInt(place_id),\n                group_id\n            );\n\n            return ApiResponse.success(res, groupData, `Found ${groupData.contacts.length} contacts in group`);\n        } catch (error) {\n            this.logger.error('Error getting group contacts:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Create custom group\n     */\n    async createGroup(req, res) {\n        try {\n            const { user_id, place_id, name, description, contact_ids } = req.body;\n\n            this.logger.info(`Creating group \"${name}\" with ${contact_ids.length} contacts`);\n\n            // Get session ID from WhatsApp service\n            const WhatsAppService = require('../services/whatsapp/WhatsAppService');\n            const whatsAppService = new WhatsAppService();\n            const sessionStatus = await whatsAppService.getSessionStatus(\n                parseInt(user_id), \n                parseInt(place_id)\n            );\n            \n            if (!sessionStatus.session_exists) {\n                return ApiResponse.error(res, 'No active session found', 400);\n            }\n\n            const group = await this.groupService.createCustomGroup(\n                parseInt(user_id),\n                parseInt(place_id),\n                sessionStatus.session_id,\n                { name, description, contact_ids }\n            );\n\n            return ApiResponse.created(res, group, 'Group created successfully');\n        } catch (error) {\n            this.logger.error('Error creating group:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Update group contacts\n     */\n    async updateGroupContacts(req, res) {\n        try {\n            const { user_id, place_id, contact_ids } = req.body;\n            const { group_id } = req.params;\n\n            this.logger.info(`Updating group ${group_id} with ${contact_ids.length} contacts`);\n\n            const result = await this.groupService.updateGroupContacts(\n                parseInt(user_id),\n                parseInt(place_id),\n                group_id,\n                contact_ids\n            );\n\n            return ApiResponse.success(res, result, 'Group contacts updated successfully');\n        } catch (error) {\n            this.logger.error('Error updating group contacts:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Delete group\n     */\n    async deleteGroup(req, res) {\n        try {\n            const { user_id, place_id } = req.query;\n            const { group_id } = req.params;\n\n            this.logger.info(`Deleting group ${group_id}`);\n\n            const result = await this.groupService.deleteGroup(\n                parseInt(user_id),\n                parseInt(place_id),\n                group_id\n            );\n\n            return ApiResponse.success(res, result, 'Group deleted successfully');\n        } catch (error) {\n            this.logger.error('Error deleting group:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Search contacts\n     */\n    async searchContacts(req, res) {\n        try {\n            const { \n                user_id, \n                place_id, \n                q, \n                is_business, \n                has_profile_picture, \n                last_interaction_days, \n                tags,\n                limit = 100\n            } = req.query;\n\n            this.logger.info(`Searching contacts for user ${user_id} with query: \"${q || 'all'}\"`);\n\n            const filters = {};\n            if (is_business !== undefined) filters.is_business = is_business === 'true';\n            if (has_profile_picture !== undefined) filters.has_profile_picture = has_profile_picture === 'true';\n            if (last_interaction_days) filters.last_interaction_days = parseInt(last_interaction_days);\n            if (tags) filters.tags = tags.split(',');\n            if (limit) filters.limit = parseInt(limit);\n\n            const contacts = await this.contactService.searchContacts(\n                parseInt(user_id),\n                parseInt(place_id),\n                q,\n                filters\n            );\n\n            return ApiResponse.success(res, contacts, `Found ${contacts.length} contacts`);\n        } catch (error) {\n            this.logger.error('Error searching contacts:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Get contact by ID\n     */\n    async getContactById(req, res) {\n        try {\n            const { user_id, place_id } = req.query;\n            const { contact_id } = req.params;\n\n            this.logger.info(`Getting contact details for ${contact_id}`);\n\n            const contact = await this.contactService.getContactById(\n                parseInt(user_id),\n                parseInt(place_id),\n                contact_id\n            );\n\n            return ApiResponse.success(res, contact, 'Contact details retrieved successfully');\n        } catch (error) {\n            this.logger.error('Error getting contact:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Update contact tags\n     */\n    async updateContactTags(req, res) {\n        try {\n            const { user_id, place_id, tags } = req.body;\n            const { contact_id } = req.params;\n\n            this.logger.info(`Updating tags for contact ${contact_id}`);\n\n            const contact = await this.contactService.updateContactTags(\n                parseInt(user_id),\n                parseInt(place_id),\n                contact_id,\n                tags\n            );\n\n            return ApiResponse.success(res, contact, 'Contact tags updated successfully');\n        } catch (error) {\n            this.logger.error('Error updating contact tags:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Get contact statistics\n     */\n    async getContactStatistics(req, res) {\n        try {\n            const { user_id, place_id } = req.query;\n\n            const stats = await this.contactService.getContactStatistics(\n                parseInt(user_id),\n                parseInt(place_id)\n            );\n\n            return ApiResponse.success(res, stats, 'Contact statistics retrieved successfully');\n        } catch (error) {\n            this.logger.error('Error getting contact statistics:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Get group statistics\n     */\n    async getGroupStatistics(req, res) {\n        try {\n            const { user_id, place_id } = req.query;\n\n            const stats = await this.groupService.getGroupStatistics(\n                parseInt(user_id),\n                parseInt(place_id)\n            );\n\n            return ApiResponse.success(res, stats, 'Group statistics retrieved successfully');\n        } catch (error) {\n            this.logger.error('Error getting group statistics:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Duplicate group\n     */\n    async duplicateGroup(req, res) {\n        try {\n            const { user_id, place_id, new_name } = req.body;\n            const { group_id } = req.params;\n\n            this.logger.info(`Duplicating group ${group_id} as \"${new_name}\"`);\n\n            // Get session ID\n            const WhatsAppService = require('../services/whatsapp/WhatsAppService');\n            const whatsAppService = new WhatsAppService();\n            const sessionStatus = await whatsAppService.getSessionStatus(\n                parseInt(user_id), \n                parseInt(place_id)\n            );\n            \n            if (!sessionStatus.session_exists) {\n                return ApiResponse.error(res, 'No active session found', 400);\n            }\n\n            const duplicatedGroup = await this.groupService.duplicateGroup(\n                parseInt(user_id),\n                parseInt(place_id),\n                sessionStatus.session_id,\n                group_id,\n                new_name\n            );\n\n            return ApiResponse.created(res, duplicatedGroup, 'Group duplicated successfully');\n        } catch (error) {\n            this.logger.error('Error duplicating group:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Update group info (name and description)\n     */\n    async updateGroupInfo(req, res) {\n        try {\n            const { user_id, place_id, name, description } = req.body;\n            const { group_id } = req.params;\n\n            this.logger.info(`Updating info for group ${group_id}`);\n\n            const result = await this.groupService.updateGroupInfo(\n                parseInt(user_id),\n                parseInt(place_id),\n                group_id,\n                { name, description }\n            );\n\n            return ApiResponse.success(res, result, 'Group info updated successfully');\n        } catch (error) {\n            this.logger.error('Error updating group info:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Get group by ID\n     */\n    async getGroupById(req, res) {\n        try {\n            const { user_id, place_id } = req.query;\n            const { group_id } = req.params;\n\n            this.logger.info(`Getting group details for ${group_id}`);\n\n            const group = await this.groupService.getGroupById(\n                parseInt(user_id),\n                parseInt(place_id),\n                group_id\n            );\n\n            return ApiResponse.success(res, group, 'Group details retrieved successfully');\n        } catch (error) {\n            this.logger.error('Error getting group:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Bulk update contacts\n     */\n    async bulkUpdateContacts(req, res) {\n        try {\n            const { user_id, place_id, updates } = req.body;\n\n            this.logger.info(`Bulk updating ${updates.length} contacts`);\n\n            const result = await this.contactService.bulkUpdateContacts(\n                parseInt(user_id),\n                parseInt(place_id),\n                updates\n            );\n\n            return ApiResponse.success(res, result, `Bulk update completed: ${result.successful} successful, ${result.failed} failed`);\n        } catch (error) {\n            this.logger.error('Error in bulk update contacts:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n}\n\nmodule.exports = ContactController;\n