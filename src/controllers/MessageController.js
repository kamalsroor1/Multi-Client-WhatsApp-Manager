const MessageService = require('../services/message/MessageService');\nconst ContactService = require('../services/contact/ContactService');\nconst ApiResponse = require('../utils/ApiResponse');\nconst Logger = require('../utils/Logger');\n\n/**\n * Controller for message operations\n * Implements Controller pattern for message-related HTTP requests\n */\nclass MessageController {\n    constructor() {\n        this.messageService = new MessageService();\n        this.contactService = new ContactService();\n        this.logger = new Logger('MessageController');\n    }\n\n    /**\n     * Send message to single contact\n     */\n    async sendMessage(req, res) {\n        try {\n            const { user_id, place_id, contact_id, message, image_url } = req.body;\n\n            this.logger.info(`Sending message to contact ${contact_id}`);\n\n            const result = await this.messageService.sendMessage(\n                parseInt(user_id),\n                parseInt(place_id),\n                contact_id,\n                message || '',\n                image_url\n            );\n\n            return ApiResponse.success(res, result, 'Message sent successfully');\n        } catch (error) {\n            this.logger.error('Error sending message:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Send message to group\n     */\n    async sendMessageToGroup(req, res) {\n        try {\n            const { user_id, place_id, message, image_url } = req.body;\n            const { group_id } = req.params;\n\n            this.logger.info(`Sending message to group ${group_id}`);\n\n            const result = await this.messageService.sendMessageToGroup(\n                parseInt(user_id),\n                parseInt(place_id),\n                group_id,\n                message || '',\n                image_url\n            );\n\n            return ApiResponse.success(res, result, 'Message sent to group successfully');\n        } catch (error) {\n            this.logger.error('Error sending message to group:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Send bulk messages\n     */\n    async sendBulkMessages(req, res) {\n        try {\n            const { user_id, place_id, recipients, message, image_url, delay_seconds = 0 } = req.body;\n\n            this.logger.info(`Sending bulk messages to ${recipients.length} recipients`);\n\n            const results = [];\n            let totalSent = 0;\n            let totalFailed = 0;\n\n            for (let i = 0; i < recipients.length; i++) {\n                const recipient = recipients[i];\n                \n                try {\n                    let result;\n                    if (recipient.contact_id) {\n                        result = await this.messageService.sendMessage(\n                            parseInt(user_id),\n                            parseInt(place_id),\n                            recipient.contact_id,\n                            message || '',\n                            image_url\n                        );\n                    } else {\n                        // If only number provided, search for contact first\n                        const contacts = await this.contactService.searchContacts(\n                            parseInt(user_id),\n                            parseInt(place_id),\n                            recipient.number\n                        );\n                        \n                        if (contacts.length === 0) {\n                            throw new Error(`Contact not found for number: ${recipient.number}`);\n                        }\n                        \n                        result = await this.messageService.sendMessage(\n                            parseInt(user_id),\n                            parseInt(place_id),\n                            contacts[0].contact_id,\n                            message || '',\n                            image_url\n                        );\n                    }\n\n                    results.push({\n                        recipient: recipient,\n                        status: 'sent',\n                        message_id: result.message_id,\n                        sent_at: result.sent_at\n                    });\n                    totalSent++;\n\n                    // Apply delay between messages if specified\n                    if (delay_seconds > 0 && i < recipients.length - 1) {\n                        await new Promise(resolve => setTimeout(resolve, delay_seconds * 1000));\n                    }\n\n                } catch (error) {\n                    this.logger.error(`Error sending to recipient ${i}:`, error);\n                    results.push({\n                        recipient: recipient,\n                        status: 'failed',\n                        error: error.message\n                    });\n                    totalFailed++;\n                }\n            }\n\n            const responseData = {\n                total_recipients: recipients.length,\n                total_sent: totalSent,\n                total_failed: totalFailed,\n                success_rate: Math.round((totalSent / recipients.length) * 100),\n                results: results,\n                processed_at: new Date().toISOString(),\n                processing_time_seconds: Math.round((Date.now() - new Date(req.startTime || Date.now())) / 1000)\n            };\n\n            return ApiResponse.success(res, responseData, 'Bulk messages processed');\n        } catch (error) {\n            this.logger.error('Error sending bulk messages:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Get message logs with pagination and filters\n     */\n    async getMessageLogs(req, res) {\n        try {\n            const { user_id, place_id, page = 1, limit = 50, status, message_type, date_from, date_to } = req.query;\n\n            // Build filters\n            const filters = {};\n            if (status) filters.status = status;\n            if (message_type) filters.message_type = message_type;\n            if (date_from) filters.date_from = new Date(date_from);\n            if (date_to) filters.date_to = new Date(date_to);\n\n            const logs = await this.messageService.getMessageLogs(\n                parseInt(user_id),\n                parseInt(place_id),\n                parseInt(page),\n                parseInt(limit),\n                filters\n            );\n\n            return ApiResponse.paginated(res, logs.logs, logs.pagination, 'Message logs retrieved successfully');\n        } catch (error) {\n            this.logger.error('Error getting message logs:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Get message statistics\n     */\n    async getMessageStatistics(req, res) {\n        try {\n            const { user_id, place_id } = req.query;\n\n            const stats = await this.messageService.getMessageStatistics(\n                parseInt(user_id),\n                parseInt(place_id)\n            );\n\n            return ApiResponse.success(res, stats, 'Message statistics retrieved successfully');\n        } catch (error) {\n            this.logger.error('Error getting message statistics:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Retry failed message\n     */\n    async retryFailedMessage(req, res) {\n        try {\n            const { message_log_id } = req.params;\n            const { user_id, place_id } = req.body;\n\n            // Get the failed message log\n            const MessageLog = require('../models/MessageLog');\n            const messageLog = await MessageLog.findById(message_log_id);\n\n            if (!messageLog) {\n                return ApiResponse.error(res, 'Message log not found', 404);\n            }\n\n            if (messageLog.user_id !== parseInt(user_id) || messageLog.place_id !== parseInt(place_id)) {\n                return ApiResponse.error(res, 'Unauthorized access to message log', 403);\n            }\n\n            if (messageLog.status !== 'failed') {\n                return ApiResponse.error(res, 'Only failed messages can be retried', 400);\n            }\n\n            // Find the contact\n            const contacts = await this.contactService.searchContacts(\n                parseInt(user_id),\n                parseInt(place_id),\n                messageLog.recipient_number\n            );\n\n            if (contacts.length === 0) {\n                return ApiResponse.error(res, 'Contact not found for retry', 404);\n            }\n\n            // Retry sending the message\n            const result = await this.messageService.sendMessage(\n                parseInt(user_id),\n                parseInt(place_id),\n                contacts[0].contact_id,\n                messageLog.message_content,\n                null // No image URL retry for now\n            );\n\n            return ApiResponse.success(res, result, 'Message retried successfully');\n        } catch (error) {\n            this.logger.error('Error retrying failed message:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Schedule message (placeholder for future implementation)\n     */\n    async scheduleMessage(req, res) {\n        try {\n            // This would be implemented with a job queue like Bull or Agenda\n            return ApiResponse.error(res, 'Message scheduling not implemented yet', 501);\n        } catch (error) {\n            this.logger.error('Error scheduling message:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Get message templates (placeholder for future implementation)\n     */\n    async getMessageTemplates(req, res) {\n        try {\n            // This would return saved message templates\n            const templates = [\n                {\n                    id: 'welcome',\n                    name: 'Welcome Message',\n                    content: 'Welcome to our service! We\\'re glad to have you.',\n                    variables: ['name']\n                },\n                {\n                    id: 'follow_up',\n                    name: 'Follow Up',\n                    content: 'Hi {name}, just following up on our previous conversation.',\n                    variables: ['name']\n                }\n            ];\n\n            return ApiResponse.success(res, templates, 'Message templates retrieved successfully');\n        } catch (error) {\n            this.logger.error('Error getting message templates:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n\n    /**\n     * Validate message content and recipients\n     */\n    async validateMessage(req, res) {\n        try {\n            const { user_id, place_id, recipients, message, image_url } = req.body;\n\n            const validation = {\n                valid: true,\n                warnings: [],\n                errors: [],\n                estimated_cost: 0,\n                estimated_time_minutes: 0\n            };\n\n            // Validate message content\n            if (!message && !image_url) {\n                validation.errors.push('Either message or image_url is required');\n                validation.valid = false;\n            }\n\n            if (message && message.length > 4000) {\n                validation.warnings.push('Message is very long and might be truncated');\n            }\n\n            // Validate recipients\n            if (!recipients || recipients.length === 0) {\n                validation.errors.push('At least one recipient is required');\n                validation.valid = false;\n            }\n\n            if (recipients && recipients.length > 1000) {\n                validation.warnings.push('Large recipient list might take a long time to process');\n            }\n\n            // Validate image URL if provided\n            if (image_url) {\n                try {\n                    const imageValidation = await this.messageService.testImageUrl(image_url);\n                    if (!imageValidation.success) {\n                        validation.errors.push(`Image URL validation failed: ${imageValidation.error}`);\n                        validation.valid = false;\n                    }\n                } catch (imageError) {\n                    validation.warnings.push('Could not validate image URL');\n                }\n            }\n\n            // Calculate estimates\n            if (recipients && recipients.length > 0) {\n                validation.estimated_time_minutes = Math.ceil(recipients.length * 2 / 60); // 2 seconds per message\n                validation.estimated_cost = recipients.length * 0.01; // Placeholder cost\n            }\n\n            return ApiResponse.success(res, validation, 'Message validation completed');\n        } catch (error) {\n            this.logger.error('Error validating message:', error);\n            return ApiResponse.error(res, error.message, 500);\n        }\n    }\n}\n\nmodule.exports = MessageController;\n